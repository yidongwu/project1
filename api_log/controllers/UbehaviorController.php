<?php
namespace api_log\controllers;

use api_cart\models\AdCart;
use api_cart\models\AdGoods;
use common\models\AddressBook;
use common\models\ApiUser;
use common\models\User;
use common\models\UserBehavior;
use Yii;
use common\controllers\ApicomController;
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;
use common\models\LoginForm;

/**
 * Site controller
 */
class UbehaviorController extends ApicomController
{
	public $enableCsrfValidation = false;
	public $_reids = '';
	const VIEWS_MORE = 2;
	const VIEWS_MORE_ONE = 1;

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
		$this->_reids = Yii::$app->request->get();
	}

	/*
	 * 提交数据
	 */
	public function actionPostLog() {
		$post = file_get_contents("php://input");
		if(!empty($post)) {
			$post = json_decode($post, true);
			$log_post['user_id'] = Yii::$app->user->id;
			$log_post['data'] = $post;

			//用户行为记录
			$route_key = Yii::$app->params['log_write_message_route_key'];
			$this->_productor($log_post, $route_key);
			return json_encode(['100', 'success']);
		}
	}

	/*
	 * 获取用户浏览过的商品
	 */
	public function actionViewsLog() {
		$count = UserBehavior::find()
				->where(['uid' => Yii::$app->user->id, 'is_show' => 1, 'is_delete' => 0])
				->groupBy('goods_id')
				->count();
		return json_encode($count);
	}

	/*
	 * 获取用户浏览最多的商品
	 */
	public function actionViewsMost() {
		$detail = Yii::$app->request->get('detail');
		$detail ? $query_str = 'goods_id, type_id, count(*) sum_count, sum(LOBT) brows_time' : $query_str = 'goods_id, count(*) sum_count, sum(LOBT) brows_time';
		$views_more = (new \yii\db\Query())
				->select($query_str)
				->from('user_behavior_log')
				->where(['uid'=>Yii::$app->user->id])
				->groupBy('goods_id')
				->orderBy(['sum_count' => SORT_DESC, 'brows_time' => SORT_DESC])  //按照浏览次数和浏览总时长来排序，如果浏览次数都一样则按照浏览时长排序
				->limit(self::VIEWS_MORE);
		if($detail) { //获取详情
			$data['data'] = $views_more->all();
		} else { //只获取具体数量
			$data['data'] = $views_more->count();
		}
		return json_encode($data);
	}

	/*
	 * 推荐商品给用户的接口
	 */
	public function actionRecommend() {
		$detail = Yii::$app->request->get('detail');
		$query_str = 'goods_id, type_id, count(*) sum_count, sum(LOBT) brows_time';
		$views_more = (new \yii\db\Query())
				->select($query_str)
				->from('user_behavior_log')
				->where(['uid'=>Yii::$app->user->id])
				->groupBy('goods_id')
				->orderBy(['sum_count' => SORT_DESC, 'brows_time' => SORT_DESC])
				->limit(self::VIEWS_MORE)
				->all();
		if(empty($views_more)) {
			$data = [];
		} else {
			foreach($views_more as $item) {
				$goods_ids[] = $item['goods_id'];
				if(empty($type_ids) || !in_array($item['type_id'], $type_ids)) {
					$type_ids[] = $item['type_id'];
				} else {
					continue;
				}
			}
		}

		if(!empty($type_ids)) {
			//查询type为上面查询出来的值中排除掉上面查询出来的goods_id后排序最高的商品推荐给用户，如果只有一个type则查询连个同类型的商品，如果有两个type则查询两个不同类型的商品
			if(count($type_ids) > 1) { //两个不同类型的商品各查询一种
				$limit = self::VIEWS_MORE_ONE;
			} else { //只有一种类型的商品则查询出两个商品
				$limit = self::VIEWS_MORE;
			}
			foreach($type_ids as $type) {
				$recomment_sql = (new \yii\db\Query())
						->select($query_str)
						->from('user_behavior_log')
						->where(['type_id' => $type])
						->andWhere('uid != ' . Yii::$app->user->id)
						->andWhere(['not in', 'goods_id', $goods_ids])
						->groupBy('goods_id')
						->orderBy(['sum_count' => SORT_DESC, 'brows_time' => SORT_DESC])
						->limit($limit);
			}
			if($detail) {
				$data['data'] = $recomment_sql->all();
			} else {
				$data['data'] = $recomment_sql->count();
				//$data['data'] = $recomment_sql->createCommand()->getRawSql();
			}
		} else {
			$data['data'] = 0;
		}
		/*$data['goods_ids'] = $goods_ids;
		$data['type_ids'] = $type_ids;*/
		return json_encode($data);
	}

	private function _productor($data, $routing_key = '') {
		$host = Yii::$app->params['route_rabbit'];
		$port = Yii::$app->params['port'];
		$user = Yii::$app->params['user'];
		$password = Yii::$app->params['pwd'];
		$vhost = Yii::$app->params['vhost'];
		$exchange_name = Yii::$app->params['log_write_message_exchange_name'];
		$exchange_type = Yii::$app->params['log_write_message_exchange_type'];
		$exchange_durable = true;
		//1 创建连接
		$conn = new AMQPStreamConnection($host,$port,$user,$password,$vhost);
		//2 创建channel，即获取信道
		$channel = $conn->channel();
		//3 声明交换器
		$channel->exchange_declare($exchange_name,$exchange_type,false,$exchange_durable);
		//4 创建消息
		$msg = new AMQPMessage(json_encode($data),array('delivery_mode'=>AMQPMessage::DELIVERY_MODE_PERSISTENT)); //AMQPMessage::DELIVERY_MODE_PERSISTENT 设置消息持久化
		//5 发布消息
		$channel->basic_publish($msg,$exchange_name,$routing_key);
		//$channel->close();
		//$conn->close();
	}
}























