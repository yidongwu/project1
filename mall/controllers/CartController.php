<?php
namespace mall\controllers;

use common\models\frontend\User;
use backend\models\AdGoodsAttr;
use mall\models\AdAttrs;
use mall\models\AdCart;
use mall\models\AdGoods;
use Yii;
use yii\base\InvalidParamException;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use common\controllers\CshopController;
use mall\models\PasswordResetRequestForm;
use mall\models\ResetPasswordForm;
use mall\models\SignupForm;
use mall\models\ContactForm;
use mall\share\Curl;
use mall\share\Functions;

/**
 * Site controller
 */
class CartController extends CshopController
{
    const EXPIRE_TIME = 3600;
    const ORDER_STATE_NOT_PAY = 0;
    private $_curl = '';
    private $_functions = '';
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['login'],
                'rules' => [
                    [
                        'allow' => false,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->_curl =Curl::getInstance();
        $this->_functions = Functions::getInstance();
    }

    /**
     * 购物车页面
     *
     * @return mixed
     */
    public function actionIndex()
    {
        //通过api接口来获取购物车数据
        $this->layout = 'page';
        $offset = 0;
        $limit = 10;
        $query_condition = '&offset=' . $offset . '&limit=' . $limit;
        $url = Yii::$app->params['api.cart.get'] . Yii::$app->session->readSession('user:' . Yii::$app->user->id . ':access_token') . '&state=' . self::ORDER_STATE_NOT_PAY . $query_condition;
        $res = $this->_curl->getCart($url);
        $cart_info = json_decode($res[0], true);
        return $this->render('index',[
            'cart' => $cart_info
        ]);
    }

    public function actionAdd() {
        $gid = Yii::$app->request->get('gid');
        $redis = Yii::$app->redis;
        //判断前端是否有提交购物车的cookie唯一id,在未登录的情况下
        $cart_cookie_id = $this->_functions->createCookie('cart_id');
        $goods_info = AdGoods::find()->select(['id', 'current_original_price'])->where(['id' => trim($gid)])->one();

        if(empty($user_id = Yii::$app->user->id)) {   //如果用户没有登录，则先将商品信息存放到redis中
            $this->_addToCart($redis, $cart_cookie_id, $goods_info);
        } else {  //如果用户已经登录，则将商品数据存放到redis并且通过生产者将数据发送给消费者，通过消费者存入mysql数据库
            $data = $this->_addToCart($redis, $cart_cookie_id, $goods_info);
            $data = json_encode($data);
            //加入购物车的生产者队列
            $url = Yii::$app->params['api.cart.post'] . Yii::$app->session->readSession('user:' . Yii::$app->user->id . ':access_token');
            $res = $this->_curl->postCurl($url, $data);
            $api_result = json_decode($res[0], true);
            if($api_result[0] == 'error') {
                //跳转到错误页面，或提示加购物车失败
                Yii::$app->getSession()->setFlash('error', '加购物车失败');
            } else {
                Yii::$app->getSession()->setFlash('success', '商品已放入购物车');
            }
        }
        return $this->redirect(Yii::$app->request->getReferrer());
    }

    public function _actionAdd() {
        $gid = Yii::$app->request->get('gid');
        $redis = Yii::$app->redis;
        //判断前端是否有提交购物车的cookie唯一id,在未登录的情况下
        $cart_cookie_id = $this->_functions->createCookie('cart_id');
        $goods_info = AdGoods::find()->select(['id', 'current_original_price'])->where(['id' => trim($gid)])->one();

        if(empty($user_id = Yii::$app->user->id)) {   //如果用户没有登录，则先将商品信息存放到redis中
            $this->_addToCart($redis, $cart_cookie_id, $goods_info);
        } else {  //如果用户已经登录，则将商品数据存放到redis并且通过生产者将数据发送给消费者，通过消费者存入mysql数据库
            $data = $this->_addToCart($redis, $cart_cookie_id, $goods_info);
            $data = json_encode($data);
            //加入购物车的生产者队列
            $url = Yii::$app->params['api.cart.post'] . Yii::$app->session->readSession('user:' . Yii::$app->user->id . ':access_token');
            $res = $this->_curl->postCurl($url, $data);
            $api_result = json_decode($res[0], true);
            if($api_result[0] == 'error') {
                //跳转到错误页面，或提示加购物车失败
                Yii::$app->getSession()->setFlash('error', '加购物车失败');
            } else {
                Yii::$app->getSession()->setFlash('success', '商品已放入购物车');
            }
        }
        return $this->redirect(Yii::$app->request->getReferrer());
    }

    public function actionDelete() {
        $id = Yii::$app->request->get('id');
        $pid = Yii::$app->request->get('pid');
        $cart_cookie_id = $this->_functions->createCookie('cart_id');
        //删除redis中的数据，然后在调用接口删除mysql中的数据
        $url = Yii::$app->params['api.cart.del'] . Yii::$app->session->readSession('user:' . Yii::$app->user->id . ':access_token') . '&id=' . (int)$id . '&cookie_id=' . $cart_cookie_id . '&pid=' . $pid;
        $res = $this->_curl->delCart($url);
        $api_result = json_decode($res[0], true);
        if($api_result[0] == "ok") {
            return $this->redirect(Yii::$app->request->getReferrer());
        }
    }

    /*
     * 商品降价通知
     */
    public function actionSubscribe() {
        if(!Yii::$app->user->id) {
            echo "<script>alert('请先登录！');window.history.go(-1);</script>";
            exit;
        }
        $goods_id = Yii::$app->request->get('gid');
        //需要提交uid,goods_id,goods_price 参数
        $goods_info = AdGoods::find()->select(['current_original_price'])->where(['id' => $goods_id])->one();
        $data['goods_id'] = $goods_id;
        $data['goods_price'] = $goods_info->current_original_price;
        $url = Yii::$app->params['api.user.subscribe'] . Yii::$app->session->readSession('user:' . Yii::$app->user->id . ':access_token');
        $res = $this->_curl->postCurl($url, json_encode($data));
        Yii::$app->getSession()->setFlash('success', '订阅成功，该商品降价将会为您发送邮件通知');
        return $this->redirect(Yii::$app->request->getReferrer());
    }

    private function _addToCart($redis, $cart_cookie_id, $goods_info) {
        //判断cart对应的redis是否存在
        if(empty($cart_cookie_id) || empty($cart_info = $redis->get($cart_cookie_id))) {
            $cart_info[] = [
                'goods_id' => $goods_info->id,
                'goods_price' => $goods_info->current_original_price,
                'sumprice' => $goods_info->current_original_price,
                'quantity' => 1,
                'time' => time()
            ];
        } else {
            $cart_info = json_decode($cart_info, true);
            $new_add_flag = 0;
            //后台定时任务定时取消超过24小时没有付款的购物车商品，并且价格低于当前价格时不能正常购买，提示重新下单
            foreach($cart_info as $cart_item_k => $cart_item) {
                if($cart_item['goods_id'] == $goods_info->id) {
                    $cart_info[$cart_item_k]['quantity'] += 1;
                    $cart_item['sumprice'] = (int)$goods_info->current_original_price * $cart_info[$cart_item_k]['quantity'];
                    $new_add_flag = 0;
                    break;
                } else {
                    $new_add_flag = 1;
                }
            }
            if($new_add_flag) {
                $cart_info[] = [
                    'goods_id' => $goods_info->id,
                    'goods_price' => $goods_info->current_original_price,
                    'sumprice' => $goods_info->current_original_price,
                    'quantity' => 1,
                    'time' => time()
                ];
            }
        }
        if(!empty($cart_cookie_id)) {
            $redis->set($cart_cookie_id, json_encode($cart_info));
            $redis->expire($cart_cookie_id, self::EXPIRE_TIME);
        }
        return $cart_info;
    }
}
